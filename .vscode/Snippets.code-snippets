{
    // Place your change-this workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Basic Command structure": {
        "prefix": ["commandstructure", "cmdstruct"],
        "body": [
            "import { Command, Message } from '../../Client';\n\nconst callback = async (message: Message, args: string[]) => {};\n\nexport const command: Command = {\n    name: '',\n    category: '',\n    aliases: [],\n    usage: '',\n    args: 0,\n    devOnly: false,\n    guildOnly: false,\n    nsfw: false,\n    memberPermission: [],\n    botPermission: [],\n    callback: callback\n};"
        ],
        "description": "Insert the basic command structure"
    },
    "Create basic eventHandler stcuture": {
        "prefix": "eventHandlerStructure",
        "body": ["import { Client } from '../Client';\n\nexport const listener = (client: Client) => {}"],
        "description": "This will automatically insert the basic event handler structure"
    }
}
